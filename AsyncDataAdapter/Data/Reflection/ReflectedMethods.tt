<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

#>
using System;
using System.Reflection;

namespace AsyncDataAdapter.Internal
{
<#  for( Int32 i = 0; i < 8; i++ ) {
        String typeParams   = ( i > 0 ? ","  : "" ) + GetTypeParameters( i, "TArg{0:d}" );
        String invokeParams = ( i > 0 ? "," : ""  ) + GetTypeParameters( i, " TArg{0:d} arg{0:d}" );
        String invokeArgs   = " new Object[] {"     + GetTypeParameters( i, " arg{0:d}" ) + " }";
        String reflectArgs  =                         GetTypeParameters( i, " typeof(TArg{0:d})" );

        if( i == 0 )
        {
            invokeArgs  = " Array.Empty<Object>()";
            reflectArgs = " parameterTypes: Array.Empty<Type>()";
        }
#>
    public static class ReflectedAction<TOwner,TName<#= typeParams #>>
        where TName : struct
    {
        private static readonly MethodInfo _methodInfo = Reflection.RequireVoidInstanceMethodInfo( typeof(TOwner), name: Reflection.GetName(typeof(TName)),<#= reflectArgs #> );

        public static void Invoke( TOwner instance<#= invokeParams #> )
        {
            Object[] arguments =<#= invokeArgs #>;
            Object value = _methodInfo.Invoke( obj: instance, parameters: arguments );
            Reflection.AssertVoid( _methodInfo, value );
        }
    }

    public static class ReflectedFunc<TOwner,TName<#= typeParams #>,TReturn>
    {
        private static readonly MethodInfo _methodInfo = Reflection.RequireInstanceMethodInfo( typeof(TOwner), name: Reflection.GetName(typeof(TName)), returnType: typeof(TReturn),<#= reflectArgs #> );

        public static TReturn Invoke( TOwner instance<#= invokeParams #> )
        {
            Object[] arguments =<#= invokeArgs #>;
            Object value = _methodInfo.Invoke( obj: instance, parameters: arguments );
            return Reflection.AssertResult<TReturn>( _methodInfo, value );
        }
    }

<#  } #>
} // namespaace
<#+

static String GetTypeParameters( Int32 count, String format )
{
    IEnumerable<String> elms = Enumerable
        .Range( 0, count )
        .Select( n => String.Format( CultureInfo.InvariantCulture, format, n ) );
        // `StringJoin` needs to be an extension method!

    return String.Join( separator: ",", elms );
}

#>